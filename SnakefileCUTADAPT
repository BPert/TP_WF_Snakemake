configfile: "config/config.yaml"

rule all:
	input:
		expand("results/fastqc_init/{sample}_fastqc.zip", sample = config["samples"]),
		expand("results/fastqc_init/{sample}_fastqc.html", sample = config["samples"]),
		expand("results/cutadapt/{sample}_1.cutadapt.fastq", sample = config["samplesCut"]),
		expand("results/cutadapt/{sample}_2.cutadapt.fastq", sample = config["samplesCut"]),
#		expand("results/fastqc_post/{sample}_cutadapt_fastqc.zip", sample = config["samples"]),
#		expand("results/fastqc_post/{sample}_cutadapt_fastqc.html", sample = config["samples"]),
#		expand("results/bowtie2/{sample}_trim_mapped_sorted_q2.bam", sample = config["samplesCut"]),
#		expand("results/markduplicates/{sample}_lessDup.bam", sample = config["samplesCut"]),
#		expand("results/macs2/{sample}_macs2.bed", sample = config["samplesCut"] )
rule unzip:
	input:
		lambda wildcards: config["samples"][wildcards.sample]
	output:
		temp("tmp/{sample}.fastq")
	log: "logs/{sample}.unzip.log"
	shell:
		"""
		mkdir -p tmp
		gunzip -c {input} > {output}
		"""

rule fastqc_init:
	input:
		"tmp/{sample}.fastq"
	output:
		zip="results/fastqc_init/{sample}_fastqc.zip",
		html="results/fastqc_init/{sample}_fastqc.html"
		
	conda:
		"config/env.yaml"
	benchmark:
		"benchmarks/fastqc_init/{sample}.fastqc.benchmark.txt"
	threads: 8
	log: "logs/fastqc_init/{sample}.fastqc.log"
	shell:
		"""
		mkdir -p results/fastqc_init
		echo " Here we start the fastqc_init analysis (jobid ={jobid}) for {input}"
		fastqc {input} -o "results/fastqc_init" -t {threads}
		"""
	
rule cutadapt:
	input:
		["tmp/{samplesCut}_1.fastq","tmp/{samplesCut}_2.fastq"]

	output:
		fastq1="results/cutadapt/{samplesCut}_1.cutadapt.fastq",
		fastq2="results/cutadapt/{samplesCut}_2.cutadapt.fastq",
		qc="results/cutadapt/{samplesCut}.qc.txt"
#	wildcard_constraints:
#		samplesCut=".*R[123]"
	params:
		adapters="-a CTGTCTCTTATACACATCTCCGAGCCCACGAGAC -A CTGTCTCTTATACACATCTGACGCTGCCGACGA",
		extra="--minimum-length 20 -q 20"
	benchmark:
		"benchmarks/cutadapt/{samplesCut}.cutadapt.benchmark.txt"
	log:
		"logs/cutadapt/{samplesCut}.log"
	threads: 0  #set desired number of threads here - To automatically detect the number of available cores, use -j 0 (or --cores=0). In the wrapper : " -j {snakemake.threads}"
	wrapper:
		"0.79.0/bio/cutadapt/pe"
		

