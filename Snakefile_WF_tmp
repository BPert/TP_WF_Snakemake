configfile: "config/config.yaml"

rule all:
	input:
		expand("results/fastqc_init/{sample}_fastqc.zip", sample = config["samples"]),
		expand("results/fastqc_init/{sample}_fastqc.html", sample = config["samples"]),
		expand("results/fastqc_post/{sample}_fastqc.zip", sample = config["samples"]),
		expand("results/fastqc_post/{sample}_fastqc.html", sample = config["samples"]),
		expand("results/deeptools/heatmap_SpearmanCorr_readCounts.png"),
		expand("results/deeptools/PlotCoverage"),
		expand("results/macs2/{sample}_summits.bed", sample = config["samplesCut"]),
		expand("results/bedtools/{sample}_0h_24h_common_peaks.bed", sample =config["idBedtools"]),
		expand("results/bedtools/{sample}_0h_unique_peaks.bed", sample =config["idBedtools"]),
		expand("results/bedtools/{sample}_24h_unique_peaks.bed", sample =config["idBedtools"])
	   

rule unzip:
	input:
		lambda wildcards: config["samples"][wildcards.sample]
	output:
		temp("tmp/{sample}.fastq")
	log: "logs/unzip/{sample}.unzip.log"
	shell:
		"""
		mkdir -p tmp
		gunzip -c {input} > {output}
		"""

rule fastqc_init:
	input:
		"tmp/{sample}.fastq"
	output:
		zip="results/fastqc_init/{sample}_fastqc.zip",
		html="results/fastqc_init/{sample}_fastqc.html"
		
	conda:
		"config/env.yaml"
	benchmark:
		"benchmarks/fastqc_init/{sample}.fastqc.benchmark.txt"
	threads: 6
	log: "logs/fastqc_init/{sample}.fastqc.log"
	shell:
		"""
		mkdir -p results/fastqc_init
		fastqc {input} -o "results/fastqc_init" -t {threads}
		"""
	
rule cutadapt:
	input:
		["tmp/{samplesCut}_1.fastq","tmp/{samplesCut}_2.fastq"]

	output:
		fastq1=temp("tmp/results/cutadapt/{samplesCut}_1.fastq"),
		fastq2=temp("tmp/results/cutadapt/{samplesCut}_2.fastq"),
		qc="results/cutadapt/{samplesCut}.qc.txt"

	params:
		adapters="-a CTGTCTCTTATACACATCTCCGAGCCCACGAGAC -A CTGTCTCTTATACACATCTGACGCTGCCGACGA",
		extra="--minimum-length 20 -q 20"
	benchmark:
		"benchmarks/cutadapt/{samplesCut}.cutadapt.benchmark.txt"
	log:
		"logs/cutadapt/{samplesCut}.log"
	threads: 0  #set desired number of threads here - To automatically detect the number of available cores, use -j 0 (or --cores=0). In the wrapper : " -j {snakemake.threads}"
	wrapper:
		"0.79.0/bio/cutadapt/pe"
		

rule fastqc_post:
	input:
		"tmp/results/cutadapt/{sample}.fastq"

	output:
		html="results/fastqc_post/{sample}_fastqc.html",
		zip="results/fastqc_post/{sample}_fastqc.zip"
	conda:
		"config/env.yaml"
	benchmark:
		"benchmarks/fastqc_post/{sample}.fastqc.benchmark.txt"
	threads: 6
	log: "logs/fastqc_post/{sample}.fastqc.log"
	shell:
		"""
		mkdir -p results/fastqc_post
		fastqc {input} -o "results/fastqc_post" -t {threads}
		"""



rule bowtie2:
	input:
		fastq1="tmp/results/cutadapt/{samplesB}_1.fastq", 
		fastq2="tmp/results/cutadapt/{samplesB}_2.fastq"
	output:
		temp("tmp/results/bowtie2/{samplesB}_trim_mapped_sorted_q2.bam")
	conda:
		"config/envBowtie2.yaml"
	benchmark:
		"benchmarks/bowtie2/{samplesB}_trim_mapped_sorted_q2.benchmark.txt"
	threads: 6 
	log: 
		bow="logs/bowtie2/{samplesB}_Bowtie2_trim_mapped_sorted_q2.log",
		samV="logs/bowtie2/{samplesB}_SamView_trim_mapped_sorted_q2.log",
		samS="logs/bowtie2/{samplesB}_SamSort_trim_mapped_sorted_q2.log",
		samI="logs/bowtie2/{samplesB}_SamIndex_trim_mapped_sorted_q2.log"

	shell:
		"""
		bowtie2  --very-sensitive  -k 10 -p {threads} -x data/mydatalocal/atacseq/indexes/bowtie2/all \
		-1 {input.fastq1} -2 {input.fastq2} 2>{log.bow} \
		|  samtools view -q 2 -b -u -@ {threads} 2>{log.samV}|  samtools sort -o {output} -@ {threads} 2>{log.samS}
		samtools index -b {output} 2>{log.samI}
		"""






rule markduplicates:
	input: 
		"tmp/results/bowtie2/{sample}_trim_mapped_sorted_q2.bam"
	output:
		f="results/markduplicates/{sample}_lessDup.bam",
		bai=temp("tmp/results/markduplicates/{sample}_lessDup.bam.bai"),
		txt="results/markduplicates/{sample}_lessDup_metrics.txt"
	conda:
		"config/envMarkWithOpenJDK.yaml"
	benchmark:
		"benchmarks/markduplicates/{sample}_lessDup.benchmark.txt"
	threads : 6
	log:
		mark="logs/markduplicates/{sample}_MarkD_lessDup.log",
		samInd="logs/markduplicates/{sample}_SamInd_lessDup.log"
	shell:
		"""
		picard MarkDuplicates \
		-I {input} \
		-O {output.f} \
		-REMOVE_DUPLICATES true\
		--METRICS_FILE {output.txt} 2> {log.mark}
		samtools index -b {output.f} 2>{log.samInd}
		"""

rule deeptools:
	params:
		bam="results/markduplicates/*_lessDup.bam"
	output:
		heatmap="results/deeptools/heatmap_SpearmanCorr_readCounts.png",
		plotcoverage="results/deeptools/PlotCoverage",
		rawcount="results/deeptools/coverageRawCount.tab"
	conda:
		"config/envDeepTools.yaml"
	benchmark:
		"benchmarks/DeepTools/deepTools.benchmark.txt"
	threads : 6
	log:
		cover="logs/DeepTools/deepToolsPlotCoverage.log",
		multi="logs/DeepTools/deepToolsMultiBamSum.log",
		cor="logs/DeepTools/deepToolsPlotCorrelation.log",
	shell:
		"""
		plotCoverage --bamfiles {params.bam}\
		--plotFile {output.plotcoverage} \
		--smartLabels \
		--outRawCounts {output.rawcount} \
		--plotFileFormat pdf 2>{log.cover}
		multiBamSummary bins --bamfiles {params.bam}\
		-o resultsMultiBamSummary.npz 2>{log.multi}
		plotCorrelation -in resultsMultiBamSummary.npz \
		--corMethod spearman --skipZeros \
		--whatToPlot heatmap --colorMap RdYlBu --plotNumbers \
		-o heatmap_SpearmanCorr_readCounts.png   \
		--outFileCorMatrix {output.heatmap} 2>{log.cor}
		"""



rule macs2:
	input:
		"results/markduplicates/{sample}_lessDup.bam"
	output:
		"results/macs2/{sample}_summits.bed"
	conda:
		"config/envMacs2.yaml"
	benchmark:
		"benchmarks/macs2/{sample}.benchmark.txt"
	log:
		"logs/macs2/{sample}.log"
	shell:
		"""
		mkdir -p  results/macs2/tmpdir
		macs2 callpeak -t {input}\
		-f BAM  \
		-n {wildcards.sample}\
		--outdir results/macs2/\
		--tempdir results/macs2/tmpdir 2>{log}
		"""



rule bedtools:
	input:
		h0="results/macs2/ss_50k_0h_{sample}_summits.bed",
		h24="results/macs2/ss_50k_24h_{sample}_summits.bed"
	output:
		common="results/bedtools/{sample}_0h_24h_common_peaks.bed",
		unique0h="results/bedtools/{sample}_0h_unique_peaks.bed",
		unique24h="results/bedtools/{sample}_24h_unique_peaks.bed"
	conda:
		"config/envBedTools.yaml"
	benchmark:
		"benchmarks/bedtools/{sample}.benchmark.txt"
	log:
		"logs/bedtools/{sample}.log"
	shell:
		"""
		bedtools intersect -a {input.h0} -b {input.h24} > {output.common}
		bedtools intersect -a {input.h0} -b {input.h24} > {output.unique0h}
		bedtools intersect -a {input.h24} -b {input.h0} > {output.unique24h}
		"""




